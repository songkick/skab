#!/usr/bin/env ruby

unless $LOAD_PATH.include?(File.dirname(__FILE__) + '/../lib')
  $LOAD_PATH.unshift(File.dirname(__FILE__) + '/../lib')
end

version = RUBY_VERSION.split('.').map { |s| s.to_i }
if version[0] <= 1 && version [1] < 9
  STDERR.puts <<-WARN18
WARNING: This software relies on feature available in Ruby 1.9 only. Using it
under Ruby 1.8 may yield unexpected results. Read the README for more
information.
  WARN18
end

usage = <<-USAGE
Usage: skab [output] [model] [extra_params]
\tTry `skab help model` for more info about available models
\tor  `skab help output` for more info about outputs
USAGE

require 'skab/models'
require 'skab/output'

if ARGV.empty?
  puts usage
  exit
end

if ARGV[0] == 'help'
  if ARGV[1] == 'model'
    if ARGV[2]
      model = Skab::Models.from_name(ARGV[2])
      if model
        puts model.help
      else
        puts <<-UNKNOWN_MODEL
This model doesn't exist. List of known models:
#{Skab::Models.model_names.join(', ')}
        UNKNOWN_MODEL
      end
    else
      puts Skab::Models.help
    end
  elsif ARGV[1] == 'output'
    if ARGV[2]
      output = Skab::Output.from_name(ARGV[2])
      if output
        puts output.help
      else
        puts <<-UNKNOWN_OUTPUT
This output doesn't exist. List of known output:
#{Skab::Output.output_names.join(', ')}
        UNKNOWN_OUTPUT
      end
    else
      puts Skab::Output.help
    end
  else
    puts usage
  end
  exit
end

model_args = ARGV.slice(2, ARGV.length)
model_class = Skab::Models.from_name(ARGV[1])
unless model_class
  puts <<-UNKNOWN_MODEL
This model doesn't exist. List of known models:
#{Skab::Models.model_names.join(', ')}
  UNKNOWN_MODEL
  exit
end

output_class = Skab::Output.from_name(ARGV[0])
unless output_class
  puts <<-UNKNOWN_OUTPUT
This output doesn't exist. List of known outputs:
#{Skab::Output.output_names.join(', ')}
  UNKNOWN_OUTPUT
  exit
end

model = model_class.new(model_args)
output = output_class.new(STDOUT)
output.output(model)
